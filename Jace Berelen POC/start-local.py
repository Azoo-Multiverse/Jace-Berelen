#!/usr/bin/env python3
"""
Jace Berelen POC - Local Startup Script
Automatically starts ngrok, updates configs, and runs the application
"""

import subprocess
import time
import requests
import json
import os
import sys
import secrets
from pathlib import Path

def check_ngrok():
    """Check if ngrok is installed"""
    try:
        result = subprocess.run(["ngrok", "version"], capture_output=True, check=True)
        print("‚úÖ ngrok found:", result.stdout.decode().strip())
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå ngrok not found!")
        print("üì• Install from: https://ngrok.com/download")
        print("üí° Or use: choco install ngrok (Windows) / brew install ngrok (Mac)")
        return False

def start_ngrok():
    """Start ngrok and return the public URL"""
    print("üöÄ Starting ngrok tunnel...")
    
    # Start ngrok in background
    ngrok_process = subprocess.Popen(
        ["ngrok", "http", "8000", "--log=stdout"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    # Wait for ngrok to initialize
    print("‚è≥ Waiting for ngrok to start...")
    time.sleep(4)
    
    # Get URL from ngrok API
    for attempt in range(3):
        try:
            response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
            if response.status_code == 200:
                tunnels = response.json()
                
                for tunnel in tunnels.get("tunnels", []):
                    if tunnel.get("proto") == "https":
                        public_url = tunnel["public_url"]
                        print(f"‚úÖ ngrok URL: {public_url}")
                        return public_url, ngrok_process
                        
        except Exception as e:
            print(f"‚ö†Ô∏è  Attempt {attempt + 1}/3 failed: {e}")
            if attempt < 2:
                time.sleep(2)
    
    print("‚ùå Could not get ngrok URL")
    return None, ngrok_process

def create_env_file(public_url):
    """Create .env file with secrets and public URL"""
    env_file = Path(".env")
    
    if env_file.exists():
        print("‚ö†Ô∏è  .env already exists - backing up to .env.backup")
        if Path(".env.backup").exists():
            Path(".env.backup").unlink()
        env_file.rename(".env.backup")
    
    # Generate secret key if needed
    secret_key = secrets.token_urlsafe(32)
    
    env_content = f"""# Jace Berelen POC - Local Development Environment
# Auto-generated by start-local.py on {time.strftime('%Y-%m-%d %H:%M:%S')}

# ============================================================================
# SECURITY SECRETS (REQUIRED)
# ============================================================================

# Auto-generated secret key
SECRET_KEY={secret_key}

# ============================================================================
# SLACK CREDENTIALS (FILL THESE OUT!)
# ============================================================================

# Get these from https://api.slack.com/apps
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token-here
SLACK_SIGNING_SECRET=your-slack-signing-secret-here
SLACK_APP_TOKEN=xapp-your-slack-app-token-here

# ============================================================================
# AI CREDENTIALS (FILL THIS OUT!)
# ============================================================================

# Get this from https://openrouter.ai
OPENROUTER_API_KEY=sk-or-your-openrouter-api-key-here

# ============================================================================
# DEVELOPMENT OVERRIDES
# ============================================================================

# Environment settings
ENVIRONMENT=development
DEBUG_MODE=true
LOG_LEVEL=DEBUG

# Auto-detected URLs from ngrok
PUBLIC_URL={public_url}
OPENROUTER_SITE_URL={public_url}

# Local development
HOST=0.0.0.0
PORT=8000

# Database (SQLite for local development)
DATABASE_URL=sqlite:///./jace_berelen.db
"""
    
    with open(env_file, "w") as f:
        f.write(env_content)
    
    print(f"‚úÖ Created .env file with ngrok URL: {public_url}")
    print("üîë Generated secure SECRET_KEY automatically")

def show_slack_instructions(public_url):
    """Show instructions for configuring Slack"""
    webhook_url = f"{public_url}/webhooks/slack"
    
    print("\n" + "="*60)
    print("üì± SLACK APP CONFIGURATION REQUIRED")
    print("="*60)
    print("1. Go to: https://api.slack.com/apps")
    print("2. Select your Slack app (or create a new one)")
    print("3. Configure these URLs:")
    print(f"   Event Subscriptions > Request URL:")
    print(f"   {webhook_url}")
    print(f"   OAuth & Permissions > Redirect URLs:")
    print(f"   {public_url}/slack/oauth")
    print("4. Update .env with your real Slack credentials")
    print("5. Restart this script after updating .env")
    print("="*60)

def check_env_file():
    """Check if .env has real credentials"""
    env_file = Path(".env")
    if not env_file.exists():
        return False
    
    with open(env_file, "r") as f:
        content = f.read()
    
    # Check for placeholder values
    placeholders = [
        "xoxb-your-slack-bot-token-here",
        "your-slack-signing-secret-here", 
        "sk-or-your-openrouter-api-key-here"
    ]
    
    for placeholder in placeholders:
        if placeholder in content:
            return False
    
    return True

def start_application():
    """Start the Jace Berelen application"""
    print("\nü§ñ Starting Jace Berelen POC...")
    
    # Check if virtual environment exists
    venv_paths = ["venv", ".venv", "env"]
    python_exe = "python"
    
    for venv_path in venv_paths:
        venv_dir = Path(venv_path)
        if venv_dir.exists():
            if os.name == "nt":  # Windows
                python_exe = str(venv_dir / "Scripts" / "python.exe")
            else:  # Linux/Mac
                python_exe = str(venv_dir / "bin" / "python")
            print(f"‚úÖ Using virtual environment: {venv_path}")
            break
    
    # Start the application
    try:
        app_process = subprocess.Popen([python_exe, "run.py"])
        return app_process
    except FileNotFoundError:
        print(f"‚ùå Could not start application with: {python_exe}")
        print("üí° Try: python run.py")
        return None

def main():
    """Main function"""
    print("ü§ñ Jace Berelen POC - Local Development Starter")
    print("=" * 50)
    
    # 1. Check prerequisites
    if not check_ngrok():
        return 1
    
    # 2. Start ngrok
    public_url, ngrok_process = start_ngrok()
    if not public_url:
        print("‚ùå Failed to start ngrok")
        return 1
    
    # 3. Create/update .env file
    create_env_file(public_url)
    
    # 4. Check if credentials are configured
    if not check_env_file():
        show_slack_instructions(public_url)
        print("\n‚ö†Ô∏è  Please update .env with your real credentials and run again")
        print("üìù Edit .env file and replace the placeholder values")
        
        # Keep ngrok running for convenience
        print(f"\nüåê ngrok will stay running at: {public_url}")
        print("‚èπÔ∏è  Press Ctrl+C to stop ngrok")
        
        try:
            ngrok_process.wait()
        except KeyboardInterrupt:
            print("\nüõë Stopping ngrok...")
            ngrok_process.terminate()
        
        return 0
    
    # 5. Start application
    app_process = start_application()
    if not app_process:
        ngrok_process.terminate()
        return 1
    
    # 6. Show success info
    print("\n" + "="*50)
    print("üéâ JACE BERELEN POC IS RUNNING!")
    print("="*50)
    print(f"üåê Public URL: {public_url}")
    print(f"üìä API Docs: {public_url}/docs")
    print(f"üíö Health Check: {public_url}/health")
    print(f"üîß Local Admin: http://localhost:8000")
    print("\nüì± Slack webhooks configured for:", public_url)
    print("\n‚èπÔ∏è  Press Ctrl+C to stop everything")
    print("="*50)
    
    try:
        # Wait for user to stop
        app_process.wait()
    except KeyboardInterrupt:
        print("\nüõë Shutting down...")
        
        # Stop application
        if app_process:
            print("   Stopping application...")
            app_process.terminate()
            try:
                app_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                app_process.kill()
        
        # Stop ngrok
        print("   Stopping ngrok...")
        ngrok_process.terminate()
        try:
            ngrok_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            ngrok_process.kill()
        
        print("‚úÖ Everything stopped!")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 